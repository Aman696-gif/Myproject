"""

Author: Aman Mohammed

Date:

Aim: The aim of this program is to create an engaging and educational math game using Python
that caters to a wide range of users, accommodating different age groups, and academic
year levels.

"""

"""

This is an arithmetic game implemented using Tkinter.

Attributes:
     root (Tk): The root window of the Tkinter application.
     name (str): The player's name.
     score (int): The player's score.
     wrong_answers (list): List of wrong answers given by the player.
     questions (list): List of questions generated during the game.
     game_running (bool): Flag indicating if the game is currently running.
     score_displayed (bool): Flag indicating if the score has been displayed.
     timer_paused (bool): Flag indicating if the game timer is paused.
     logo_image (PhotoImage): Image displayed in the main menu.
     think (PhotoImage): Image displayed in the game options menu.
     
"""

import tkinter as tk
from tkinter import messagebox
import random

class ArithmeticGame:
    def __init__(self, root):
        # Initialize the main window and game variables
        self.root = root
        self.root.title("FUN MATH GAME")
        self.root.geometry("500x520")  
        self.root.configure(bg="light blue")

        # Game variables
        self.name = ""
        self.score = 0
        self.wrong_answers = []
        self.questions = []
        self.game_running = False
        self.score_displayed = False
        self.timer_paused = False

        # Load and display the image
        self.logo_image = tk.PhotoImage(file="math_game_logo.png")
        self.logo_label = tk.Label(root, image=self.logo_image, bg="light blue")
        self.logo_label.pack(pady=10)


        # Create and pack widgets for player's name input
        self.name_label = tk.Label(root, text="Enter your name:", font=("Times", 14), bg="light blue")
        self.name_label.pack(pady=10)
        self.name_entry = tk.Entry(root, font=("Times", 12))
        self.name_entry.pack(pady=10)
        # Start button
        self.name_button = tk.Button(root, text="Start", command=self.validate_name, font=("Times", 12),
                                     bg="light blue", width=15, height=2)
        self.name_button.pack(pady=10)

    def validate_name(self):
        # Validate the name input to ensure it is alphabetic and not too long
        self.name = self.name_entry.get()
        if self.name.isalpha() and len(self.name) <= 10:
            
            # If valid, remove the initial setup widgets to prepare for the game
            self.name_label.pack_forget()
            self.name_entry.pack_forget()
            self.name_button.pack_forget()
            self.logo_label.pack_forget()
            
            #Show game options
            self.show_game_options()
        elif len(self.name) > 10:
            # If the name is too long, show an error message
            messagebox.showerror("Invalid Name", "Name cannot be longer than 10 letters.")
        else:
            # If invalid, show an error message
            messagebox.showerror("Invalid Name", "Please enter a valid name containing only letters.")

    def show_game_options(self):
        # Display the options for selecting the game mode
        self.root.geometry("500x600")
        
        # Label prompting the user to select a game mode
        self.option_label = tk.Label(self.root, text="Select Game Mode:", font=("Times", 14),width=25,
                                     height=2)
        self.option_label.pack(pady=10)
        
        # Button for selecting the Arithmetic Game mode
        self.arithmetic_button = tk.Button(self.root, text="Arithmetic Game", command=self.start_game,
                                           font=("Times", 12), width=20, height=2)
        self.arithmetic_button.pack(pady=10)
        
        # Button for selecting the Quick Guess Game mode
        self.quick_game_button = tk.Button(self.root, text="Quick Guess Game",
                                           command=self.start_quick_game, font=("Times", 12),
                                           width=20, height=2)
        self.quick_game_button.pack(pady=10)

        self.think = tk.PhotoImage(file="think.png")  

        # Display the image
        self.image_label = tk.Label(root, image=self.think, bg="light blue")
        self.image_label.image = self.think
        self.image_label.pack(pady=10)

    def start_quick_game(self):
        # Hide any existing game options
        self.option_label.pack_forget()
        self.arithmetic_button.pack_forget()
        self.quick_game_button.pack_forget()
        self.image_label.pack_forget()
        self.root.geometry("400x300")

        # Initialize Quick Guess Game variables 
        self.target_number = random.randint(1, 100)
        # Keeps track of how many guesses the player has made
        self.attempts = 0

        # Create Quick Guess Game widgets
        self.guess_label = tk.Label(self.root, text="Guess a number between 1 and 100:",
                                    font=("Times", 14))
        self.guess_label.pack(pady=10)
        
        # Player inputs their guess
        self.guess_entry = tk.Entry(self.root, font=("Times", 12))
        self.guess_entry.pack(pady=10)
        
        # Button for submitting the guess
        self.guess_button = tk.Button(self.root, text="Submit Guess", command=self.check_guess,
                                      font=("Times", 12), width=12, height=2)
        self.guess_button.pack(pady=10)
        
        # Area displaying result of each guess
        self.result_label = tk.Label(self.root, text="", font=("Times", 12))
        self.result_label.pack(pady=10)
        
        # Button for stopping the game
        self.stop_button = tk.Button(self.root, text="Stop Game", command=self.stop_quick_game,
                                     font=("Times", 12), width=12, height=2)
        self.stop_button.pack(pady=10)

    def check_guess(self):
        #Check the player's guess against the target number
        try:
            guess = int(self.guess_entry.get())
            self.attempts += 1
            if guess < self.target_number:
                self.result_label.config(text="Too low! Try again.")
            elif guess > self.target_number:
                self.result_label.config(text="Too high! Try again.")
            else:
                self.result_label.config(text=f"Congratulations, {self.name}! You guessed the number in {self.attempts} attempts.")
                # Save the game results
                self.save_quick_game_results()
                self.show_quick_game_results()
        except ValueError:
            # If the input is not a valid number, show an error message
            messagebox.showerror("Invalid Input", "Please enter a valid number.")

    def stop_quick_game(self):
        # Hide all widgets 
        self.guess_label.pack_forget()
        self.guess_entry.pack_forget()
        self.guess_button.pack_forget()
        self.result_label.pack_forget()
        self.stop_button.pack_forget()

        # Inform the user that the quick game has been stopped
        messagebox.showinfo("Game Stopped", "The quick game has been stopped.")
        #Return to the main menu 
        self.show_game_options()

    def save_quick_game_results(self):
        # Save the quick game results to a text file
        with open("quick_game_scores.txt", "a") as file:
            file.write(f"Name: {self.name}, Attempts: {self.attempts}\n")
    
    def show_quick_game_results(self):
        # Show the results of the quick game and provide options to play again
        self.guess_label.pack_forget()
        self.guess_entry.pack_forget()
        self.guess_button.pack_forget()
        self.result_label.pack_forget()
        self.stop_button.pack_forget()
        
        # Create a new window to display the game results
        congrats_window = tk.Toplevel(self.root)
        congrats_window.title("Congratulations!")
        congrats_window.configure(bg="pink")
        congrats_label = tk.Label(congrats_window,
                                  text=f"Congratulations, {self.name}! You guessed the number in {self.attempts} attempts.",
                                  font=("Times", 14), bg = "pink")
        congrats_label.pack(pady=10)

        congrats = tk.PhotoImage(file="congrats.png")  

        # Display the image
        image_label = tk.Label(congrats_window, image=congrats, bg="pink")
        image_label.image = congrats
        image_label.pack(pady=10)

        # Ask the user if they want to play another game
        play_again_label = tk.Label(congrats_window, text="Would you like to play another game?",
                                    font=("Times", 14), bg = "pink")
        play_again_label.pack(pady=10)

        # Button to start the arithmetic game
        play_arithmetic_button = tk.Button(congrats_window, text="Play Arithmetic Game",
                                           command=lambda: [congrats_window.destroy(), self.start_game()],
                                           font=("Times", 12),
                                           bg = "pink", width=20, height=2)
        play_arithmetic_button.pack(pady=10)
        # Button to play the quick guess game again
        play_quick_game_button = tk.Button(congrats_window, text="Play Quick Guess Game Again",
                                           command=lambda: [congrats_window.destroy(), self.start_quick_game()],
                                           font=("Times", 12),
                                           bg = "pink", width=25, height=2)
        play_quick_game_button.pack(pady=10) 

    def start_game(self):
        # Start the Arithmetic Game mode and initialize difficulty selection
        self.option_label.pack_forget()
        self.arithmetic_button.pack_forget()
        self.quick_game_button.pack_forget()
        self.image_label.pack_forget()
        # Resize the window for the arithmetic game
        self.root.geometry("600x400")
    
        self.difficulty_label = tk.Label(self.root, text="Select Difficulty:",
                                         font=("Times", 14), width=17, height=2)
        self.difficulty_label.pack(pady=(10, 50))

        # Create a frame to hold the difficulty buttons
        self.difficulty_frame = tk.Frame(self.root)
        self.difficulty_frame.pack(pady=(0, 20))

        # Create radio buttons for each difficulty level and add them to the frame
        self.difficulty_var = tk.StringVar()
        self.easy_button = tk.Radiobutton(self.difficulty_frame, text="Easy",
                                          variable=self.difficulty_var, value="easy",
                                          font=("Times", 12), width=12, height=2)
        self.easy_button.pack(side=tk.LEFT, padx=5)
        self.medium_button = tk.Radiobutton(self.difficulty_frame, text="Medium",
                                            variable=self.difficulty_var, value="medium",
                                            font=("Times", 12), width=12, height=2)
        self.medium_button.pack(side=tk.LEFT, padx=5)
        self.hard_button = tk.Radiobutton(self.difficulty_frame, text="Hard",
                                          variable=self.difficulty_var, value="hard",
                                          font=("Times", 12), width=12, height=2)
        self.hard_button.pack(side=tk.LEFT, padx=5)
        self.challenge_button = tk.Radiobutton(self.difficulty_frame, text="Challenge",
                                               variable=self.difficulty_var, value="challenge",
                                               font=("Times", 12), width=12, height=2)
        self.challenge_button.pack(side=tk.LEFT, padx=5)

        # Button to start the game after the user selects a difficulty
        self.start_button = tk.Button(self.root, text="Start Game", command=self.set_difficulty,
                                      font=("Times", 12), width=15, height=2)
        self.start_button.pack(pady=(30, 10))
   

    def set_difficulty(self):
        #  Set game parameters based on the selected difficulty level and start the game
        difficulty = self.difficulty_var.get()
        
        # Easy mode gives more time to answer
        if difficulty == "easy":
            self.time_limit = 120
            self.range_start = 1
            self.range_end = 10
            self.challenge_mode = False
            messagebox.showinfo("Easy Mode",
                                "You have 120 seconds to answer the questions. Game will end when the time runs out or if you get 5 wrong answers.")
        # Medium mode with a shorter time limit
        elif difficulty == "medium":
            self.time_limit = 90
            self.range_start = 10
            self.range_end = 50
            self.challenge_mode = False
            messagebox.showinfo("Medium Mode",
                                "You have 90 seconds to answer the questions. Game will end when the time runs out or if you get 5 wrong answers.")
        # Hard mode with shortest time limit
        elif difficulty == "hard":
            self.time_limit = 60
            self.range_start = 50
            self.range_end = 100
            self.challenge_mode = False
            messagebox.showinfo("Hard Mode",
                                "You have 60 seconds to answer the questions. Game will end when the time runs out or if you get 5 wrong answers.")
        # Challenge mode with no pause and less time
        elif difficulty == "challenge":
            self.time_limit = 65
            self.range_start = 50
            self.range_end = 100
            self.challenge_mode = True
            messagebox.showinfo("Challenge Mode",
                                "You have 65 seconds to answer the questions. The pause button is not available in this mode. Game will end when the time runs out or if you get 5 wrong answers.")
        else:
            # If no difficulty is selected, show an error message
            messagebox.showerror("Select Difficulty", "Please select a difficulty level.")
            return
        
        # Hide the difficulty selection widgets and start the game
        self.start_button.pack_forget()
        self.easy_button.pack_forget()
        self.medium_button.pack_forget()
        self.hard_button.pack_forget()
        self.challenge_button.pack_forget()
        self.difficulty_label.pack_forget()
        self.difficulty_frame.destroy()
        self.run_game()

    def generate_question(self):
        # Generate an arithmetic question
        num1 = random.randint(self.range_start, self.range_end)
        num2 = random.randint(self.range_start, self.range_end)
        operation = random.choice(["+", "-", "*", "/"])
        if operation == "/":
            # Ensure the divisor is not zero to avoid division by zero error
            while num2 == 0:  
                num2 = random.randint(self.range_start, self.range_end)
            question = f"{num1} {operation} {num2}"
            answer = num1 // num2  
        else:
            question = f"{num1} {operation} {num2}"
            answer = eval(question)
        self.questions.append((question, answer, operation))

    def run_game(self):
        # Start the arithmetic game 
        # Set game running status to True
        self.game_running = True
        # Ensure the timer is not paused at the start
        self.timer_paused = False
        # Reset score display status
        self.score_displayed = False
        # Set the initial time limit for the game
        self.time_left = self.time_limit
         # Initialize the player's score
        self.score = 0
        # Initialize the list to track wrong answers
        self.wrong_answers = []
        # Initialize the list to store questions
        self.questions = []

        # Set up the UI elements for the game
        self.question_label = tk.Label(self.root, text="", font=("Times", 14))
        self.question_label.pack(pady=10)
        self.note_label = tk.Label(self.root, text="", font=("Times", 10))  
        self.note_label.pack(pady=5)
        self.answer_entry = tk.Entry(self.root, font=("Times", 12))
        self.answer_entry.pack(pady=10)
         # Button to submit the answer
        self.submit_button = tk.Button(self.root, text="Submit",
                                       command=self.check_answer, font=("Times", 12), width=15, height=2)
        self.submit_button.pack(pady=10)
        self.button_frame = tk.Frame(self.root)
        self.button_frame.pack(pady=10)
        # Button to stop the game
        self.stop_button = tk.Button(self.button_frame, text="Stop Game",
                                     command=self.stop_game, font=("Times", 12), width=15, height=2)  
        self.stop_button.grid(row=0, column=0, padx=5)
        # Add pause and play buttons if not in challenge mode
        if not self.challenge_mode:
            # Button to pause the game
            self.pause_button = tk.Button(self.button_frame, text="Pause",
                                          command=self.pause_game, font=("Times", 12), width=15, height=2)  
            self.pause_button.grid(row=0, column=1, padx=5)
            # Button to resume the game
            self.play_button = tk.Button(self.button_frame, text="Play",
                                         command=self.play_game, font=("Times", 12), width=15, height=2)  
            self.play_button.grid(row=0, column=2, padx=5)
        # Set the timer and start the first question
        self.time_left = self.time_limit
        self.update_timer()
        self.next_question()

    def update_timer(self):
        # Update the countdown timer
        if self.time_left > 0 and self.game_running and not self.timer_paused:
            self.root.after(1000, self.update_timer)
            self.time_left -= 1
        elif self.time_left == 0:
            # End the game when the timer reaches zero
            self.end_game()

    def pause_game(self):
        # Pause the game timer
        self.timer_paused = True
        messagebox.showinfo("Game Paused", "The game is paused.")

    def play_game(self):
        # Resume the game timer
        if self.timer_paused:
            self.timer_paused = False
            messagebox.showinfo("Game On", "The game is on.")
            self.update_timer()

    def check_answer(self):
        # Check the user's answer against the correct answer
        if not self.timer_paused:
            try:
                user_answer = int(self.answer_entry.get())
                # Extract the current question and correct answer from the last question in the list
                current_question, correct_answer, operation = self.questions[-1]
                if user_answer == correct_answer:
                    # If the user's answer is correct, increment the score
                    self.score += 1
                else:
                    # If the user's answer is incorrect, store the wrong answer
                    self.wrong_answers.append((current_question, correct_answer, user_answer))
                    # If 5 wrong answers have been given, stop the game
                    if len(self.wrong_answers) >= 5:
                        self.stop_game()
                        return
                    # Clear the answer entry field and move to the next question
                self.answer_entry.delete(0, tk.END)
                self.next_question()  
            except ValueError:
                # Show an error message if the user's input is not a valid integer
                messagebox.showerror("Invalid Input", "Please enter a valid number.")
        else:
            # Display an error if the user tries to submit an answer while the game is paused
            messagebox.showerror("Game Paused", "You cannot submit an answer while the game is paused.")

    def next_question(self):
        # Move to the next question if the game is still running and time is left
        if self.time_left > 0 and self.game_running:
            self.generate_question()
            current_question, _, operation = self.questions[-1]
            self.question_label.config(text=current_question)
            if operation == "/":
                # Display a note for division questions indicating that only the integer part is considered
                self.note_label.config(text="Note: Only the integer part of the division is considered.")
            else:
                # Clear the note label for other operations
                self.note_label.config(text="")
        else:
            # If time runs out or the game is stopped, end the game
            self.end_game()

    def stop_game(self):
        # End the game when the user clicks the stop button
        self.game_running = False
        self.end_game()

    def end_game(self):
        # Ensure the game only ends once and the score is displayed once
        if not self.score_displayed:
            self.score_displayed = True
            # Hide all game-related widgets
            self.question_label.pack_forget()
            self.answer_entry.pack_forget()
            self.submit_button.pack_forget()
            self.button_frame.pack_forget()
            self.note_label.pack_forget()
            # Display the game results
            self.display_results()

    def display_results(self):
        # Display the game results and correct answers for wrong responses
        results_window = tk.Toplevel(self.root)
        results_window.title("Game Over")
        results_window.configure( bg = "pink")

        # Display the image
        game_over = tk.PhotoImage(file="game_over.png")
        image_label = tk.Label(results_window, image=game_over, bg="pink")
        image_label.image = game_over
        image_label.pack(pady=10)

        # Display the user's score
        results_label = tk.Label(results_window, text=f"Game Over! {self.name}, your score is {self.score}.",
                                 font=("Times", 14), bg = "pink")
        results_label.pack(pady=10)

        wrong_answers_label = tk.Label(results_window, text="Review of incorrect answers:",
                                       font=("Times", 12), bg = "pink")
        wrong_answers_label.pack(pady=10)

        # Display each wrong answer with the correct answer
        for question, correct_answer, user_answer in self.wrong_answers:
            answer_review = tk.Label(results_window, text=f"{question} = {correct_answer} (Your answer: {user_answer})",
                                     font=("Times", 12), bg = "pink")
            answer_review.pack(pady=5)

        # Save the game results
        self.save_results()

        # Ask the user if they want to play another game
        play_again_label = tk.Label(results_window, text="Would you like to play another game?",
                                    font=("Times", 14), bg = "pink")
        play_again_label.pack(pady=10)

        # Buttons to start a new arithmetic game or quick guess game
        play_arithmetic_button = tk.Button(results_window, text="Play Arithmetic Game Again",
                                           command=lambda: [results_window.destroy(), self.start_game()],
                                           font=("Times", 12), bg = "pink", width=24, height=2)
        play_arithmetic_button.pack(pady=10)
    
        play_quick_game_button = tk.Button(results_window, text="Play Quick Guess Game",
                                           command=lambda: [results_window.destroy(), self.start_quick_game()],
                                           font=("Times", 12),  bg = "pink", width=20, height=2)
        play_quick_game_button.pack(pady=10)
        
        # Update the window size to fit content
        results_window.update_idletasks() 
        width = max(300, results_window.winfo_reqwidth())  
        height = max(200, results_window.winfo_reqheight()) 
        results_window.geometry(f"{width}x{height}")

    def save_results(self):
        # Save the results to a text file
        with open("scores.txt", "a") as file:
            # Write the player's name and score to the file
            file.write(f"Name: {self.name}, Score: {self.score}\n")
            # Write each wrong answer along with the correct answer to the file
            for question, correct_answer, user_answer in self.wrong_answers:
                file.write(f"{question} = {correct_answer} (Your answer: {user_answer})\n")
            # Add a blank line after each game session
            file.write("\n")
        # Show a message box to inform the user that their results have been saved
        messagebox.showinfo("Results Saved", "Your results have been saved to scores.txt.")

if __name__ == "__main__":
    # Create the main application window and start the game
    root = tk.Tk()
    game = ArithmeticGame(root)
    root.mainloop()
