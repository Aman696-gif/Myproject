import tkinter as tk
from tkinter import messagebox
import random

class ArithmeticGame:
    def __init__(self, root):
        # Initialize the main window and game variables
        self.root = root
        self.root.title("FMG")
        self.root.geometry("400x300")  # Set the window size
        self.name = ""
        self.score = 0
        self.wrong_answers = []
        self.questions = []
        self.game_running = False  # Flag to track if the game is running
        self.score_displayed = False  # Flag to ensure the score is only displayed once
        self.timer_paused = False  # Flag to track if the timer is paused

        # Create and pack the name entry widgets
        self.name_label = tk.Label(root, text="Enter your name:", font=("Arial", 14))
        self.name_label.pack(pady=10)
        self.name_entry = tk.Entry(root, font=("Arial", 12))
        self.name_entry.pack(pady=10)
        self.name_button = tk.Button(root, text="Start", command=self.validate_name, font=("Arial", 12))
        self.name_button.pack(pady=10)

    def validate_name(self):
        # Validate the name input to ensure it is alphabetic
        self.name = self.name_entry.get()
        if self.name.isalpha():
            # If valid, proceed to the game setup
            self.name_label.pack_forget()
            self.name_entry.pack_forget()
            self.name_button.pack_forget()
            self.show_game_options()
        else:
            # If invalid, show an error message
            messagebox.showerror("Invalid Name", "Please enter a valid name.")

    def show_game_options(self):
        # Create and pack the game options widgets
        self.option_label = tk.Label(self.root, text="Select Game Mode:", font=("Arial", 14))
        self.option_label.pack(pady=10)
        self.arithmetic_button = tk.Button(self.root, text="Arithmetic Game", command=self.start_game, font=("Arial", 12))
        self.arithmetic_button.pack(pady=10)
        self.quick_game_button = tk.Button(self.root, text="Quick Guess Game", command=self.start_quick_game, font=("Arial", 12))
        self.quick_game_button.pack(pady=10)

    def start_quick_game(self):
        # Hide any existing game options
        self.option_label.pack_forget()
        self.arithmetic_button.pack_forget()
        self.quick_game_button.pack_forget()

    # Initialize Quick Guess Game variables and UI
        self.target_number = random.randint(1, 100)
        self.attempts = 0

    # Create Quick Guess Game widgets
        self.guess_label = tk.Label(self.root, text="Guess a number between 1 and 100:", font=("Arial", 14))
        self.guess_label.pack(pady=10)
        self.guess_entry = tk.Entry(self.root, font=("Arial", 12))
        self.guess_entry.pack(pady=10)
        self.guess_button = tk.Button(self.root, text="Submit Guess", command=self.check_guess, font=("Arial", 12))
        self.guess_button.pack(pady=10)
        self.result_label = tk.Label(self.root, text="", font=("Arial", 12))
        self.result_label.pack(pady=10)

        self.stop_button = tk.Button(self.root, text="Stop Game", command=self.stop_quick_game, font=("Arial", 12))
        self.stop_button.pack(pady=10)

    def check_guess(self):
        try:
            guess = int(self.guess_entry.get())
            self.attempts += 1
            if guess < self.target_number:
                self.result_label.config(text="Too low! Try again.")
            elif guess > self.target_number:
                self.result_label.config(text="Too high! Try again.")
            else:
                self.result_label.config(text=f"Congratulations, {self.name}! You guessed the number in {self.attempts} attempts.")
                self.save_quick_game_results()
                self.show_quick_game_results()
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid number.")

    def save_quick_game_results(self):
        # Save the quick game results to a text file
        with open("quick_game_scores.txt", "a") as file:
            file.write(f"Name: {self.name}, Attempts: {self.attempts}\n")
    
    def show_quick_game_results(self):
        # Show the results of the quick game and provide options to play again
        self.guess_label.pack_forget()
        self.guess_entry.pack_forget()
        self.guess_button.pack_forget()
        self.result_label.pack_forget()
        self.stop_button.pack_forget()

        congrats_window = tk.Toplevel(self.root)
        congrats_window.title("Congratulations!")
        congrats_label = tk.Label(congrats_window, text=f"Congratulations, {self.name}! You guessed the number in {self.attempts} attempts.", font=("Arial", 14))
        congrats_label.pack(pady=10)
        
        play_again_label = tk.Label(congrats_window, text="Would you like to play another game?", font=("Arial", 14))
        play_again_label.pack(pady=10)
        
        play_arithmetic_button = tk.Button(congrats_window, text="Play Arithmetic Game", command=lambda: [congrats_window.destroy(), self.start_game()], font=("Arial", 12))
        play_arithmetic_button.pack(pady=10)
        play_quick_game_button = tk.Button(congrats_window, text="Play Quick Guess Game", command=lambda: [congrats_window.destroy(), self.start_quick_game()], font=("Arial", 12))
        play_quick_game_button.pack(pady=10)
        
    def stop_quick_game(self):
        self.guess_label.pack_forget()
        self.guess_entry.pack_forget()
        self.guess_button.pack_forget()
        self.result_label.pack_forget()
        self.stop_button.pack_forget()
        messagebox.showinfo("Game Stopped", "You have stopped the game.")
        self.show_game_options()
 
    def start_game(self):
    
        # Create and pack the difficulty selection widgets
        self.option_label.pack_forget()
        self.arithmetic_button.pack_forget()
        self.quick_game_button.pack_forget()
        
        self.difficulty_label = tk.Label(self.root, text="Select Difficulty:", font=("Arial", 14))
        self.difficulty_label.pack(pady=10)
        self.difficulty_var = tk.StringVar()
        self.easy_button = tk.Radiobutton(self.root, text="Easy", variable=self.difficulty_var, value="easy", font=("Arial", 12))
        self.easy_button.pack(pady=5)
        self.medium_button = tk.Radiobutton(self.root, text="Medium", variable=self.difficulty_var, value="medium", font=("Arial", 12))
        self.medium_button.pack(pady=5)
        self.hard_button = tk.Radiobutton(self.root, text="Hard", variable=self.difficulty_var, value="hard", font=("Arial", 12))
        self.hard_button.pack(pady=5)
        self.challenge_button = tk.Radiobutton(self.root, text="Challenge", variable=self.difficulty_var, value="challenge", font=("Arial", 12))
        self.challenge_button.pack(pady=5)
        self.start_button = tk.Button(self.root, text="Start Game", command=self.set_difficulty, font=("Arial", 12))
        self.start_button.pack(pady=10)

    

    def set_difficulty(self):
        # Set the game parameters based on the selected difficulty
        difficulty = self.difficulty_var.get()
        if difficulty == "easy":
            self.time_limit = 100
            self.range_start = 1
            self.range_end = 10
            self.challenge_mode = False
            messagebox.showinfo("Easy Mode", "You have 100 seconds to answer the questions.")
        elif difficulty == "medium":
            self.time_limit = 100
            self.range_start = 10
            self.range_end = 50
            self.challenge_mode = False
            messagebox.showinfo("Medium Mode", "You have 100 seconds to answer the questions.")
        elif difficulty == "hard":
            self.time_limit = 20
            self.range_start = 50
            self.range_end = 100
            self.challenge_mode = False
            messagebox.showinfo("Hard Mode", "You have 20 seconds to answer the questions.")
        elif difficulty == "challenge":
            self.time_limit = 20
            self.range_start = 50
            self.range_end = 100
            self.challenge_mode = True
            messagebox.showinfo("Challenge Mode", "You have 20 seconds to answer the questions. The pause button is not available in this mode.")
        else:
            messagebox.showerror("Select Difficulty", "Please select a difficulty level.")
            return
        # Hide the difficulty selection widgets and start the game
        self.start_button.pack_forget()
        self.easy_button.pack_forget()
        self.medium_button.pack_forget()
        self.hard_button.pack_forget()
        self.challenge_button.pack_forget()
        self.difficulty_label.pack_forget()
        self.run_game()

    def generate_question(self):
        # Generate a random arithmetic question
        num1 = random.randint(self.range_start, self.range_end)
        num2 = random.randint(self.range_start, self.range_end)
        operation = random.choice(["+", "-", "*", "/"])
        if operation == "/":
            while num2 == 0:  # Ensure divisor is not zero
                num2 = random.randint(self.range_start, self.range_end)
            question = f"{num1} {operation} {num2}"
            answer = num1 // num2  # Floor division
        else:
            question = f"{num1} {operation} {num2}"
            answer = eval(question)
        self.questions.append((question, answer, operation))

    def run_game(self):
        # Start the arithmetic game and initialize the UI elements
        self.game_running = True
        self.score_displayed = False
        self.time_left = self.time_limit
        self.score = 0
        self.wrong_answers = []
        self.questions = []
        
        self.question_label = tk.Label(self.root, text="", font=("Arial", 14))
        self.question_label.pack(pady=10)
        self.note_label = tk.Label(self.root, text="", font=("Arial", 10))  # Label for notes (division operation)
        self.note_label.pack(pady=5)
        self.answer_entry = tk.Entry(self.root, font=("Arial", 12))
        self.answer_entry.pack(pady=10)
        self.submit_button = tk.Button(self.root, text="Submit", command=self.check_answer, font=("Arial", 12))
        self.submit_button.pack(pady=10)
        self.button_frame = tk.Frame(self.root)
        self.button_frame.pack(pady=10)
        self.stop_button = tk.Button(self.button_frame, text="Stop Game", command=self.stop_game, font=("Arial", 12))  # Stop button
        self.stop_button.grid(row=0, column=0, padx=5)
        if not self.challenge_mode:
            self.pause_button = tk.Button(self.button_frame, text="Pause", command=self.pause_game, font=("Arial", 12))  # Pause button
            self.pause_button.grid(row=0, column=1, padx=5)
            self.play_button = tk.Button(self.button_frame, text="Play", command=self.play_game, font=("Arial", 12))  # Play button
            self.play_button.grid(row=0, column=2, padx=5)
        # Initialize the timer and start the first question
        self.time_left = self.time_limit
        self.update_timer()
        self.next_question()

    def update_timer(self):
        # Update the countdown timer
        if self.time_left > 0 and self.game_running and not self.timer_paused:
            self.root.after(1000, self.update_timer)
            self.time_left -= 1
        elif self.time_left == 0:
            # End the game when the timer reaches zero
            self.end_game()

    def pause_game(self):
        # Pause the game timer
        self.timer_paused = True
        messagebox.showinfo("Game Paused", "The game is paused.")

    def play_game(self):
        # Resume the game timer
        if self.timer_paused:
            self.timer_paused = False
            messagebox.showinfo("Game On", "The game is on.")
            self.update_timer()

    def check_answer(self):
        # Check the user's answer against the correct answer
        if not self.timer_paused:
            try:
                user_answer = int(self.answer_entry.get())
                current_question, correct_answer, operation = self.questions[-1]
                if user_answer == correct_answer:
                    self.score += 1
                else:
                    self.wrong_answers.append((current_question, correct_answer, user_answer))
                self.answer_entry.delete(0, tk.END)
                self.next_question()  # Automatically move to the next question
            except ValueError:
                messagebox.showerror("Invalid Input", "Please enter a valid number.")
        else:
            messagebox.showerror("Game Paused", "You cannot submit an answer while the game is paused.")

    def next_question(self):
        # Move to the next question
        if self.time_left > 0 and self.game_running:
            self.generate_question()
            current_question, _, operation = self.questions[-1]
            self.question_label.config(text=current_question)
            if operation == "/":
                self.note_label.config(text="Note: Only the integer part of the division is considered.")
            else:
                self.note_label.config(text="")
        else:
            self.end_game()

    def stop_game(self):
        # End the game when the user clicks the stop button
        self.game_running = False
        self.end_game()

    def end_game(self):
        # Ensure the game only ends once and the score is displayed once
        if not self.score_displayed:
            self.score_displayed = True
            self.question_label.pack_forget()
            self.answer_entry.pack_forget()
            self.submit_button.pack_forget()
            self.button_frame.pack_forget()
            self.note_label.pack_forget()
            self.display_results()

    def display_results(self):
    # Display the game results and correct answers for wrong responses
        results_window = tk.Toplevel(self.root)
        results_window.title("Game Over")

        results_label = tk.Label(results_window, text=f"Game Over! {self.name}, your score is {self.score}.", font=("Arial", 14))
        results_label.pack(pady=10)

        wrong_answers_label = tk.Label(results_window, text="Review of incorrect answers:", font=("Arial", 12))
        wrong_answers_label.pack(pady=10)

        for question, correct_answer, user_answer in self.wrong_answers:
            answer_review = tk.Label(results_window, text=f"{question} = {correct_answer} (Your answer: {user_answer})", font=("Arial", 12))
            answer_review.pack(pady=5)

        self.save_results()

        play_again_label = tk.Label(results_window, text="Would you like to play another game?", font=("Arial", 14))
        play_again_label.pack(pady=10)

        play_arithmetic_button = tk.Button(results_window, text="Play Arithmetic Game Again", command=lambda: [results_window.destroy(), self.start_game()], font=("Arial", 12))
        play_arithmetic_button.pack(pady=10)
    
        play_quick_game_button = tk.Button(results_window, text="Play Quick Guess Game", command=lambda: [results_window.destroy(), self.start_quick_game()], font=("Arial", 12))
        play_quick_game_button.pack(pady=10)

        results_window.update_idletasks()  # Update the window size to fit content
        width = max(300, results_window.winfo_reqwidth())  # Set minimum width
        height = max(200, results_window.winfo_reqheight())  # Set minimum height
        results_window.geometry(f"{width}x{height}")

    def save_results(self):
        # Save the results to a text file
        with open("scores.txt", "a") as file:
            file.write(f"Name: {self.name}, Score: {self.score}\n")
            for question, correct_answer, user_answer in self.wrong_answers:
                file.write(f"{question} = {correct_answer} (Your answer: {user_answer})\n")
            file.write("\n")
        messagebox.showinfo("Results Saved", "Your results have been saved to scores.txt.")

if __name__ == "__main__":
    # Create the main application window and start the game
    root = tk.Tk()
    game = ArithmeticGame(root)
    root.mainloop()
